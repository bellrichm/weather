-
  branches:
    only:
      - master

  version: 1.0.{build}

  environment:
    COVERALLS_REPO_TOKEN: ${COVERALLS_REPO_TOKEN}
    SONARQUBE_REPO_TOKEN: ${SONARQUBE_REPO_TOKEN}
    AZURE_PW: ${AZURE_PW}
    ARTIFACT_NAME: ${ARTIFACT_NAME}
    BRANCH_NAME: ${BRANCH_NAME}
    DEPLOY: ${DEPLOY}

  # cannot be a script, because this is before the pull of the code
  # just trying to short circuit a build if not for expected branch
  init:
    - echo "******************************** Init ********************************"
    - rem set
    - IF NOT "%APPVEYOR_REPO_BRANCH%"=="%BRANCH_NAME%" (
      set APPVEYOR_SKIP_FINALIZE_ON_EXIT=true & appveyor exit)

  install:
    - ps: appveyor/init.ps1
    - ps: appveyor/install.ps1

  before_build:
    - ps: appveyor/before_build.ps1

  build_script:
    - ps: appveyor/build.ps1

  after_build:
    - ps: appveyor/after_build.ps1

  test_script:
    - ps: appveyor/test.ps1

  before_deploy:
    - ps: appveyor/before_deploy.ps1
    - ps: >-
        if ($env:BUILD_ARTIFACT -eq "NO")
        {
          return
        }

        $cmd = "Push-AppveyorArtifact $env:ARTIFACT_NAME.zip -DeploymentName $env:ARTIFACT_NAME -type WebDeployPackage"

        $cmd = $cmd

        Write-Host "Running: $cmd"

        Invoke-Expression $cmd -ErrorVariable $errvar

        Write-Host "error $error"

        Write-Host "err $err"

        Write-Host "errvar $errvar"

        Write-Host "last rc $LastExitCode"

        Write-Host "count $error.Count"

        if ($error -ne '')
        {
          # $host.SetShouldExit(1) # TODO: temporarily ignore error
        }

        # set APPVEYOR_SKIP_FINALIZE_ON_EXIT=true & appveyor exit)

  deploy_script:
    - ps: appveyor/deploy.ps1

  after_deploy:
    - ps: appveyor/after_deploy.ps1